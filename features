- os seguintes casos precisam ser rotas:
    [x] Como usuário, cadastrar produto linkado com um dono, e com diversas informações:
        titulo, descricao, preço, categoria, ID do dono
    [x] Como usuário, poder cadastrar uma categoria (relação 1 pra vários com o produto)
    [x] Como usuário, assossiar um produto à categoria
    [x] Como usuário, poder atualizar as informações de produtos e categorias
        [x] produto
        [x] categoria
    [x] como usuário, poder deletar produtos ou categorias
        [x] produto
        [x] categoria
    [x] conexão com o Bucket S3
    [x] o catálogo de produtos e categorias deve ser buscado em um bucket S3 para que o tempo de resposta seja bem curto
    [x] quando ouver uma atualização no catálogo, publicar a mudança para o tópico "catalog-emit"
    [x] implementar um consumidor que escuta por movimentos específicos do SQS
    [x] ao receber uma mensagem, o sistema deve fazer a busca no banco
        e atualizar os dados que estão no JSON gerado dentro do bucket S3
    [-] considerar a possibilidade de adicionar loadbalancer

----
ao rodar a aplicação, um usuário precisa estar criado para poder fazer login
esse usuário pode criar categorias, produtos e outros usuários
    uma categoria possui: slug (texto único) e título (texto)
    um produto possui: titulo, descricao, preço, categoria, user Id ("dono" do produto)
    um usuário possui: login, nome, email, senha

ao criar ou alterar algum produto ou alterar alguma categoria que está linkada a um produto
    - o sistema precisa emitir uma notificação para o SQS da Amazon
    - o SQS vai mandar um request para o sistema (ou uma função lambda)
        - em seguida (o sistema ou a lambda) vai buscar os dados atualizados no banco
        - criar um arquivo JSON com os dados
        - fazer upload pro bucket S3

ao acessar a listagem de produtos, o sistema deve buscar o arquivo JSON mais recente dentro do bucket
